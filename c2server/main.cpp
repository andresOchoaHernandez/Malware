#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#include <crypto.hpp>

#define SERVER_PORT 5000
#define MAXIMUM_CONNECTIONS 1

int main(void)
{
    /* ========== DEBUG ========== */
    cryptography c;

    std::string cyphertext = c.encrypt("ciao!");
    std::string message = c.decrypt(cyphertext);

    std::cout << "cyphertext : " << cyphertext << std::endl;
    std::cout << "message : " << message << std::endl;
    /* =========================== */

    /* CREATING SOCKET */
    int listenFd = socket(AF_INET,SOCK_STREAM,0);
    if ( listenFd < 0 )
    {
        std::cout << "[SERVER] Failed to create a socket" << std::endl;
        exit(-1);
    }

    /* SERVER STRUCT */
    struct sockaddr_in serverAddress;
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);
    serverAddress.sin_port = htons(SERVER_PORT);

    if( bind(listenFd,(struct sockaddr*)&serverAddress,sizeof(serverAddress)) < 0 )
    {
        std::cout << "[SERVER] Failed to bind local address" << std::endl;
        exit(-1);
    }
    
    if ( listen(listenFd,MAXIMUM_CONNECTIONS) < 0 )
    {
        std::cout << "[SERVER] Error while starting to listen" << std::endl;
        exit(-1);
    }

    std::cout << "[SERVER] listening on port : " << SERVER_PORT << std::endl;

    while(true)
    {
        struct sockaddr_in clientAddress;
        socklen_t clientAddressLen = sizeof(clientAddress);
        int connectionFd = accept(listenFd,(struct sockaddr*)&clientAddress,&clientAddressLen);

        if(connectionFd < 0)
        {
            std::cout << "[SERVER] Error while accepting a request" << std::endl;
        }

        /* CHILD PROCESS WILL HANDLE THE REQUEST */
        if(fork() == 0)
        {
            close(listenFd);

            std::cout << "[SERVER] Accepted request from : " << inet_ntoa(clientAddress.sin_addr) << std::endl;

            /* SERVER RESPONSE */
            std::string message = "Hello from server!\n";
            if( send(connectionFd,message.c_str(),message.length(),0) < 0 )
            {
                std::cout << "[SERVER] Failed to send response to client" << std::endl;
                exit(-1);
            }

            close(connectionFd);
            exit(0);
        }
        
        close(connectionFd);
    }

    return 0;
}